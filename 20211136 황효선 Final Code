import pygame
import random
from os import path

img_dir = path.join(path.dirname(__file__), 'img')
snd_dir = path.join(path.dirname(__file__), 'snd')

WIDTH = 1000
HEIGHT = 600
FPS = 60
POWERUP_TIME = 5000

# define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

# initialize pygame and create window
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Shmup!")
clock = pygame.time.Clock()

font_name = pygame.font.match_font('arial')

# Load boss image
boss_img = pygame.image.load(path.join(img_dir, "boss.png")).convert_alpha()

def draw_shield_bar(surf, x, y, pct):
    if pct < 0:
        pct = 0
    BAR_LENGTH = 200  # 체력바의 길이 조정
    BAR_HEIGHT = 10
    fill = (pct / 500) * BAR_LENGTH  # 보스의 최대 체력인 500으로 나누어 게이지 비율 계산
    outline_rect = pygame.Rect(x, y, BAR_LENGTH, BAR_HEIGHT)
    fill_rect = pygame.Rect(x, y, fill, BAR_HEIGHT)
    pygame.draw.rect(surf, GREEN, fill_rect)
    pygame.draw.rect(surf, WHITE, outline_rect, 2)

class Boss(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(boss_img, (200, 300))  # Adjust boss size if needed
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = int(self.rect.width * .85 / 2)
        self.rect.x = WIDTH - self.rect.width
        self.rect.centery = HEIGHT / 2
        self.speedy = 5  # Adjust boss speed if needed
        self.shield = 500  # Boss's initial shield/health

    def update(self):
        self.rect.y += self.speedy
        if self.rect.top <= 0 or self.rect.bottom >= HEIGHT:
            self.speedy *= -1

    def draw_shield_bar(self, surf):
        x = self.rect.x  # 체력바 위치 조정
        y = self.rect.y - 20
        pct = self.shield / 500  # 체력바 게이지 비율 계산
        draw_shield_bar(surf, x, y, pct)

def draw_text(surf, text, size, x, y):
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, BLACK)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surf.blit(text_surface, text_rect)


def newmob():
    m = Mob()
    all_sprites.add(m)
    mobs.add(m)


def draw_shield_bar(surf, x, y, pct):
    if pct < 0:
        pct = 0
    BAR_LENGTH = 100
    BAR_HEIGHT = 10
    fill = (pct / 100) * BAR_LENGTH
    outline_rect = pygame.Rect(x, y, BAR_LENGTH, BAR_HEIGHT)
    fill_rect = pygame.Rect(x, y, fill, BAR_HEIGHT)
    pygame.draw.rect(surf, GREEN, fill_rect)
    pygame.draw.rect(surf, WHITE, outline_rect, 2)


def draw_lives(surf, x, y, lives, img):
    for i in range(lives):
        img_rect = img.get_rect()
        img_rect.x = x + 30 * i
        img_rect.y = y
        surf.blit(img, img_rect)


class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(player_img, (100, 76))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = 20
        self.rect.centerx = 50
        self.rect.bottom = HEIGHT / 2
        self.speedx = 0
        self.speedy = 0
        self.shield = 100
        self.shoot_delay = 250
        self.last_shot = pygame.time.get_ticks()
        self.lives = 3
        self.hidden = False
        self.hide_timer = pygame.time.get_ticks()
        self.power = 1
        self.power_time = pygame.time.get_ticks()

    def update(self):
        # timeout for powerups
        if self.power >= 2 and pygame.time.get_ticks() - self.power_time > POWERUP_TIME:
            self.power -= 1
            self.power_time = pygame.time.get_ticks()

        # unhide if hidden
        if self.hidden and pygame.time.get_ticks() - self.hide_timer > 1000:
            self.hidden = False
            self.rect.centerx = 50
            self.rect.bottom = HEIGHT / 2

        self.speedx = 0
        self.speedy = 0
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_LEFT]:
            self.speedx = -8
        elif keystate[pygame.K_RIGHT]:
            self.speedx = 8
        if keystate[pygame.K_UP]:
            self.speedy = -8
        elif keystate[pygame.K_DOWN]:
            self.speedy = 8
        if keystate[pygame.K_SPACE]:
            self.shoot()
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.bottom > HEIGHT:
            self.rect.bottom = HEIGHT
        if self.rect.top < 0:
            self.rect.top = 0

    def powerup(self):
        self.power += 1
        self.power_time = pygame.time.get_ticks()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            if self.power == 1:
                bullet = Bullet(self.rect.right, self.rect.centery)
                all_sprites.add(bullet)
                bullets.add(bullet)
                shoot_sound.play()
            if self.power >= 2:
                bullet1 = Bullet(self.rect.right, self.rect.centery - 10)
                bullet2 = Bullet(self.rect.right, self.rect.centery + 10)
                all_sprites.add(bullet1)
                all_sprites.add(bullet2)
                bullets.add(bullet1)
                bullets.add(bullet2)
                shoot_sound.play()

    def hide(self):
        # hide the player temporarily
        self.hidden = True
        self.hide_timer = pygame.time.get_ticks()
        self.rect.center = (50, HEIGHT + 200)


class Mob(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image_orig = random.choice(meteor_images)
        self.image_orig.set_colorkey(BLACK)
        self.image = self.image_orig.copy()
        self.rect = self.image.get_rect()
        self.radius = int(self.rect.width * .85 / 2)
        self.rect.x = random.randrange(WIDTH + 20, WIDTH + 100)
        self.rect.centery = random.randrange(HEIGHT)
        self.speedx = random.randrange(-8, -3)
        self.rot = 0
        self.rot_speed = random.randrange(-8, 8)
        self.last_update = pygame.time.get_ticks()

    def rotate(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > 50:
            self.last_update = now
            self.rot = (self.rot + self.rot_speed) % 360
            new_image = pygame.transform.rotate(self.image_orig, self.rot)
            old_center = self.rect.center
            self.image = new_image
            self.rect = self.image.get_rect()
            self.rect.center = old_center

    def update(self):
        self.rotate()
        self.rect.x += self.speedx
        if self.rect.right < 0:
            self.rect.x = random.randrange(WIDTH + 20, WIDTH + 100)
            self.rect.centery = random.randrange(HEIGHT)
            self.speedx = random.randrange(-8, -3)


class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = bullet_img
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centery = y
        self.rect.centerx = x
        self.speedx = 10

    def update(self):
        self.rect.x += self.speedx
        if self.rect.left > WIDTH:
            self.kill()


class Pow(pygame.sprite.Sprite):
    def __init__(self, center):
        pygame.sprite.Sprite.__init__(self)
        self.type = random.choice(['shield', 'gun'])
        self.image = powerup_images[self.type]
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.speedx = -5

    def update(self):
        self.rect.x += self.speedx
        if self.rect.right < 0:
            self.kill()


class Explosion(pygame.sprite.Sprite):
    def __init__(self, center, size):
        pygame.sprite.Sprite.__init__(self)
        self.size = size
        self.image = explosion_anim[self.size][0]
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.frame = 0
        self.last_update = pygame.time.get_ticks()
        self.frame_rate = 75

    def update(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > self.frame_rate:
            self.last_update = now
            self.frame += 1
            if self.frame == len(explosion_anim[self.size]):
                self.kill()
            else:
                center = self.rect.center
                self.image = explosion_anim[self.size][self.frame]
                self.rect = self.image.get_rect()
                self.rect.center = center


def show_go_screen():
    screen.blit(background, background_rect)
    draw_text(screen, "MT Surviver!", 100, WIDTH / 2, HEIGHT / 4)
    draw_text(screen, "Arrow keys move, Space to fire", 30,
              WIDTH / 2, HEIGHT / 2)
    draw_text(screen, "Press a key to begin", 18, WIDTH / 2, HEIGHT * 3 / 4)
    pygame.display.flip()
    waiting = True
    while waiting:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                waiting = False


# Load all game graphics
background = pygame.image.load(path.join(img_dir, "bg.png")).convert()
background_rect = background.get_rect()
player_img = pygame.image.load(path.join(img_dir, "p1.png")).convert_alpha()
player_mini_img = pygame.transform.scale(player_img, (25, 19))
player_mini_img.set_colorkey(BLACK)
bullet_img = pygame.image.load(path.join(img_dir, "shoot.png")).convert()
meteor_images = []
meteor_list = ['alchohol1.png', 'alchohol2.png', 'alchohol3.png',
               'alchohol4.png', 'alchohol5.png', 'alchohol6.png',
               'alchohol7.png']
for img in meteor_list:
    meteor_images.append(pygame.image.load(path.join(img_dir, img)).convert())
explosion_anim = {}
explosion_anim['lg'] = []
explosion_anim['sm'] = []
explosion_anim['player'] = []
for i in range(9):
    filename = 'regularExplosion0{}.png'.format(i)
    img = pygame.image.load(path.join(img_dir, filename)).convert_alpha()
    img.set_colorkey(BLACK)
    img_lg = pygame.transform.scale(img, (75, 75))
    explosion_anim['lg'].append(img_lg)
    img_sm = pygame.transform.scale(img, (32, 32))
    explosion_anim['sm'].append(img_sm)
    filename = 'sonicExplosion0{}.png'.format(i)
    img = pygame.image.load(path.join(img_dir, filename)).convert_alpha()
    img.set_alpha(None)
    img.set_colorkey(BLACK)
    explosion_anim['player'].append(img)
powerup_images = {}
powerup_images['shield'] = pygame.image.load(path.join(img_dir, 'powerup1.png')).convert()
powerup_images['gun'] = pygame.image.load(path.join(img_dir, 'powerup2.png')).convert()


# Load all game sounds
shoot_sound = pygame.mixer.Sound(path.join(snd_dir, 'pew.wav'))
shield_sound = pygame.mixer.Sound(path.join(snd_dir, 'pow4.wav'))
power_sound = pygame.mixer.Sound(path.join(snd_dir, 'pow5.wav'))
expl_sounds = []
for snd in ['expl3.['expl3]의 snd에 대해.wav', 'expl6.wav']:wav', 'expl6.dll']:
    expl_sounds.append(pygame.mixer.expl_message.dll(pygame.dll).Sound(path.join(snd_dir, snd)))소리(path.join(snd_dir, snd))
player_die_sound = pygame.mixer.player_die_sound = pygame.discovery.Sound(path.join(snd_dir, 'rumble1.ogg'))소리(path.join(snd_dir, 'rumble1.ogg')
pygame.mixer.게임, 게임. 게임music.load(path.join(snd_dir, 'tgfcoder-FrozenJam-SeamlessLoop.ogg'))music.load(path.join(snd_dir, 'tgfcoder-FrozenJam-SeamlessLoop.ogg')
pygame.mixer.게임, 게임. 게임music.set_volume(0.4)music.set_volume(0.4)

pygame.mixer.게임, 게임. 게임music.play(loops=-1)music.play(재생 장치=-1)
boss = None  # 보스 변수를 전역 변수로 변경boss = None  # 보스 변수를 전역 변수로 변경

# Game loop게임 루프
game_over = Truegame_over = 참
explosion_anim = {}폭발_anim = {}폭발_anim = {}substance_anim = {}
explosion_anim['lg'] = []폭발_anim['lg'] = []폭발_anim['lg'] = []발폭_anim['lg'] = []
explosion_anim['sm'] = []폭발_anim['sm'] = []폭발_anim['sm'] = []smdk_anim['sm'] = []
explosion_anim['player'] = []폭발_anim['플레이어'] = []폭발_anim['player'] = []발폭_anim['player'] = []
for i in range(9):i 범위(9):i 범위(9):i 위범(9):
    filename = 'regularExplosion0{}.png'.format(i)파일 이름 = 'regularExposure0{.png'.format(i)파일 이름 = 'regularExposure0{.png'.format(i) 파일 이름 = 'regularExposure0{.png'.format(i)
    img = pygame.image.load(path.join(img_dir, filename)).convert_alpha()img = pygame.image.load(경로.vmdk(img_vmdk, 파일 이름)).img = pygame.image.load(경로.vmx(img_vmx, 파일 이름)).vmx_alpha img = pygame.image.load("img_vmx").syslog_alphafilenamesyslog_alpha 파일 이름
    img.img.img.img.set_colorkey(BLACK)set_ color 키(블랙)set_ colorkey(BLACK)set_ color 키(랙)
    img_lg = pygame.transform.scale(img, (75, 75))img_lg = pygame.dll.scale (img, (75, 75))img_lg = pygame.dll.scale (img, (75, 75))img_lg = pygame.dll.scale (img, (75, 75))
    explosion_anim['lg'].폭발['lg']폭발['lg']append(img_lg)append(img_lg)폭['lg']append(img_lg)append(img_lg)
    img_sm = pygame.transform.scale(img, (32, 32))img_sm = pygame.dll.scale(img, (32, 32))img_sm = pygame.sm.scale(img, (32, 32))img_sm = pygame.sm.scale(img, (32, 32))
    explosion_anim['sm'].폭발적인 반응]폭발적인 반응]append(img_sm)append(img_sm)img_sm]sm(img_sm) img_sm
    filename = 'sonicExplosion0{}.png'.format(i)파일 이름 = 'sonicExplosure0{.png'.format(i)파일 이름 = 'sonicExplosure0{.png'.format(i) 파일 이름 = 'sonicExplosure0{.png'.format(i)
    img = pygame.image.load(path.join(img_dir, filename)).convert_alpha()img = pygame.image.load(경로.vmdk(img_vmdk, 파일 이름)).img = pygame.image.load(경로.vmx(img_vmx, 파일 이름)).vmx_alpha img = pygame.image.load("img_vmx").syslog_alphafilenamesyslog_alpha 파일 이름
    img.img.img.img.set_alpha(None)set_alpha(없음)set_alpha(없음)set_alpha(음없)
    img.img.img.img.set_colorkey(BLACK)set_ color 키(블랙)set_ colorkey(BLACK)set_ color 키(랙)
    explosion_anim['player'].폭발_anim['플레이어']폭발_anim['플레이어']append(img)추가(img)폭발_anim['img']append가(img)추어(img)플이(img)
        boss = Boss()보스 = 보스()
        all_sprites.add(boss)all_sprites.add(추가)
        bosses.add(boss)bosss.add(추가)

    # keep loop running at the right speed루프를 올바른 속도로 계속 실행
    clock.tick(FPS)clock.tick(FPS)
    # Process input (events)프로세스 입력(이벤트)
    for event in pygame.event.get():pygame.event.get()의 이벤트에 대해:
        # check for closing window닫힘 창 확인
        if event.type == pygame.if event.type == pygame.QUIT:종료:
            running = False실행 중 = 거짓

    # Update업데이트
    all_sprites.update()all_sprites.update()

    # check to see if a bullet hit a mob폭도들에게 총알이 맞았는지 확인합니다.
    hits = pygame.sprite.groupcollide(mobs, bullets, True, True)히트 = pygame.sprite.groupcollide(몹, 글머리 기호, True, True)
    for hit in hits:적중 시:
        score += 50 - hit.radius점수 += 50 - 적중.1987점수 += 50 - 적중.점수 += 50 - 적중.
        random.난수의난수의choice(expl_sounds).선택(expl_cisco)선택(expl_message).message선(expl_택) explplay()연극을 보다play()연극을 보다
        expl = Explosion(hit.rect.center, 'lg')exp = 폭발(hit.rect.center, 'lg')exp = 폭발(hit.rect.center, 'lg') exp = 폭발(hit.rect.center, 'lg')
        all_sprites.add(expl)all_sprites.add(explicate)all_sprites.add(explicate) all_sprites.add(explicate)
        if random.random() > 0.9:if random.if random.sys > 0.9: if random.sys > 0.9:sys > 0.9:
            pow = Pow(hit.rect.center)pow = Pow(hit.rect.center)pow = Pow(hit.rect.center) pow = Pow(hit.rect.center)
            all_sprites.add(pow)all_sprite.add(pow)all_sprite.add(pow) all_sprite.add(pow)
            powerups.add(pow)powerups.add(pow)powerups.add(pow)powerups.add(pow)
        newmob()뉴몹

    # check to see if a mob hit the player폭도들이 선수를 때렸는지 확인합니다.폭도들이 그 선수를 때렸는지 확인해 보세요.
    hits = pygame.sprite.spritecollide(player, mobs, True, pygame.sprite.collide_circle)히트 = pygame.sprite.sprite collide(플레이어, 몹, True, pygame.sprite.sprite_collide)히트 = pygame.sprite.sprite collide(플레이어, 몹, True, pygame.sprite.sprite_collide)히트 = pygame.sprite.sprite 충돌 (플레이, 어, True, pygame.sprite.sprite_collash)
    for hit in hits:적중 시:적중 시:적중 시:
        player.선수의선수의shield -= hit.radius * 2실드 -= 히트.선의shield -= hit.radius * 2 드실 -= 히트.실드 * 2실드 * 2
        expl = Explosion(hit.rect.center, 'sm')exp = 폭발(hit.rect.center, 'sm')exp = 폭발(hit.rect.center, 'sm') exp = 폭발(hit.rect.center, 'sm')
        all_sprites.add(expl)all_sprites.add(explicate)all_sprites.add(explicate) all_sprites.add(explicate)
        newmob()뉴몹뉴모브
        if player.if player.if player. if player.shield <= 0:실드 < = 0:실드 < = 0:304 < = 0:
            player_die_sound.play()player_die_sound.play()player_die_sound.play (player_die_sound.play)
            death_explosion = Explosion(player.rect.center, 'player')death_buffer = 폭발(player.rect.center, 'player')death_rect = 폭발(player.rect.center, 'player') death_rect = buffer폭(player.rect.center, 'player')
            all_sprites.add(death_explosion)all_sprites.add(death_sprites)all_sprites.add(death_sprites) all_sprites.add(death_sprites)
            player.hide()플레이어.숨김()player.hide 플()숨어이레.김()()김
            player.lives -= 1player.player.filen -= 1명.filen -= 1 ▁1 1파일 - = 1 _ 11
            player.선수의선수의shield = 100실드 = 100선수의shield = 100실드 = 100

    # check to see if player hit a powerup플레이어가 파워업을 했는지 확인합니다.플레이어가 파워업을 했는지 확인합니다.
    hits = pygame.sprite.spritecollide(player, powerups, True)히트 = pygame.sprite.sprite 충돌(플레이어, 파워업, True)히트 = pygame.sprite.sprite collide(플레이어, 파워업, True) = pygame.sprite.sprite를 히트합니다(플레어, 파워업, True).
    for hit in hits:적중 시:적중 시:적중 시:
        if hit.type == 'shield':if hit.type == 'shield':if hit.type == 'shield': if hit.type == 'shield':
            player.선수의선수의shield += random.randrange(10, 30)실드 += randrange(10, 30)실드 += randrange (10, 30) += randrange (10, 30)
            shield_sound.play()방패_사운드.play()shield_sound.play를 사용합니다.
            if player.if player.if player. if player.shield >= 100:실드 >= 100:실드 > = 100:304 > = 100:
                player.선수의선수의shield = 100실드 = 100선수의shield = 100실드 = 100
        if hit.type == 'gun':if hit.type == 'gun':if hit.type == 'gun':If hit.type == 'gun':
            player.선수의선수의powerup()전원을 켜다 ()선수의powerup()전원을 켜다 ()
            power_sound.play()power_sound.power_sound.play()power_sound.play 설정정설을

    # if the player died and the explosion has finished playing플레이어가 사망하고 폭발이 재생을 종료한 경우플레이어가 사망하고 폭발이 플레이를 종료한 경우
    if player.lives == 0 and not death_explosion.if player.discovery == 0이고 death_discovery가 아닙니다.alive():if player.discovery == 0이고 death_discovery.if player.discovery == 0인 경우 death_discovery.discovery:활성 모드:활성 모드:
        game_over = Truegame_over = 참game_over = Truegame_over = 참

    # Draw / render그리기/렌더그리기/렌더(리그/렌더)
    screen.fill(BLACK)screen.fill(검은색)screen.fill(검은색)screen.fill(설정)
    screen.blit(background, background_rect)screen.blit(background, background_rect)screen.blit(background, background_rect)screen.blit(background, background_rect)
    all_sprites.draw(screen)all_sprites.draw(화면)all_sprites.draw(화면) all_sprites.draw(화면)
    draw_text(screen, str(score), 18, WIDTH / 2, 10)draw_text(화면, str(점수), 18, WIDEW / 2, 10)draw_text(화면, str(점수), 18, WIDENT / 2, 10)draw_text(그림, str(점수), 18, WIDEW / 2, 10)
    draw_shield_bar(screen, 5, 5, player.draw_shield_bar(화면, 5, 5, 플레이어).draw_shield_bar(화면, 5, 5, player.draw_shield_bar(표시, 5, 5, 5, 5).shield)방패)실드)
    draw_lives(screen, WIDTH - 100, 5, player.lives, player_mini_img)draw_lives (화면,폭-100,5,플레이어.lives,플레이어_mini_img)draw_lives (화면, 폭 - 100, 5, player.lives, player_mini_img)draw_lives (면폭-100, 5,레어플이.lives,레어플_mini_img)

    # Draw boss's shield bar보스의 방패막대 그리기보스의 방패막대 그리기
    if len(bosses) > 0:if len(len) > 0:if len(len) > 0: if len(len) > 0:
        bosses.sprites()[0].draw_shield_bar(screen)bosss.sprite()()[0].draw_shield_bar(화면)

    # check to see if player hit the boss선수가 보스를 때렸는지 확인합니다.
    if boss is not None:  # 보스가 생성된 경우에만 충돌 검사 수행if boss is not None:  # 보스가 생성된 경우에만 충돌 검사 수행
        hits = pygame.sprite.spritecollide(player, bosses, False, pygame.sprite.collide_circle)히트 = pygame.sprite.sprite collide(플레이어, 보스, 거짓, pygame.sprite.sprite_collide)
        for hit in hits:적중 시:
            player.선수의shield -= 10  # Adjust damage amount if needed실드 -= 10 # 필요시 데미지량 조정
            if player.if player.shield <= 0:실드 < = 0:
                player_die_sound.play()player_die_sound.play()
                death_explosion = Explosion(player.rect.center, 'player')death_buffer = 폭발(player.rect.center, 'player')
                all_sprites.add(death_explosion)all_sprites.add(death_sprites)
                player.hide()플레이어.숨김()
                player.lives -= 1player.filen -= 1 ▁1 1
                player.선수의shield = 100실드 = 100
        boss_hits = pygame.sprite.spritecollide(boss, bullets, True)  # 보스에 대한 충돌 검사boss_hits = pygame.sprite.spritecollide(boss, bullets, True)  # 보스에 대한 충돌 검사
        for boss_hit in boss_hits:boss_hit in boss_hit in boss_hit:
            boss.두목shield -= 10  # Adjust damage amount if needed실드 -= 10 # 필요시 데미지량 조정
            if boss.상사라면shield <= 0:실드 < = 0:
                # 보스를 처치한 경우에 대한 처리# 보스를 처치한 경우에 대한 처리
                player_die_sound.play()
                death_explosion = Explosion(boss.rect.center, 'lg')death_rect.center = 폭발(boss.rect.center, 'lg')
                all_sprites.add(death_explosion)all_sprites.add(death_sprites)
                boss.kill()보스.킬.
                game_over = Truegame_over = 참

    # Draw / render그리기/렌더
    screen.fill(BLACK)screen.fill(검은색)
    screen.blit(background, background_rect)screen.blit(background, background_rect)
    all_sprites.draw(screen)all_sprites.draw(화면)
    draw_text(screen, str(score), 18, WIDTH / 2, 10)draw_text(화면, str(점수), 18, WIDEW / 2, 10)
    draw_shield_bar(screen, 5, 5, player.draw_shield_bar(화면, 5, 5, 플레이어).shield)방패)
    draw_lives(screen, WIDTH - 100, 5, player.lives, player_mini_img)draw_lives (화면,폭-100,5,플레이어.lives,플레이어_mini_img)

    # Draw boss's shield bar보스의 방패막대 그리기
    if len(bosses) > 0:if len(len) > 0:
        bosses.sprites()[0].draw_shield_bar(screen)bosss.sprite()()[0].draw_shield_bar(화면)
    
    if game_over:게임오버의 경우:
        if player.lives == 0 and not death_explosion.if player.discovery == 0이고 death_discovery가 아닙니다.alive():활성 모드:
            draw_text(screen, "You Win!", 64, WIDTH / 2, HEIGHT / 2)draw_text(화면, "You Win!", 64, Width / 2, Height / 2)

    # *after* drawing everything, flip the display*모든 것을 그린 후* 디스플레이를 뒤집습니다.
    pygame.display.flip()pygame.display.display.pygame

pygame.quit()장난.
